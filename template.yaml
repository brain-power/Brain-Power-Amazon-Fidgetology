# To deploy for the first time, and for each update,
# run both of the following commands in order:
#
# aws cloudformation package \
# --template-file template.yaml \
# --output-template-file master-template.yaml \
# --s3-bucket <your-s3-bucket-name>
#
# aws cloudformation deploy \
# --template-file master-template.yaml \
# --stack-name <STACK_NAME> \
# --capabilities CAPABILITY_IAM

AWSTemplateFormatVersion: '2010-09-09'
# Using Serverless Application Model (SAM) CF template definition
# See specification: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md
Transform: 'AWS::Serverless-2016-10-31' 
Globals:
  Function:
    Timeout: 300 # seconds
    MemorySize: 1024 # MB
    Environment:
      Variables:
        KVS_STREAM_NAME: !Ref KVSStreamName
        PRODUCER_START_TIMESTAMP_KEY: "producer_start_timestamp"
        KDS_RAW_STREAM_NAME: !Ref RawDataStream
        KDS_PROCESSED_STREAM_NAME: !Ref ProcessedDataStream
        REK_STREAM_PROCESSOR_NAME: !Sub "${AWS::StackName}-rek-stream-processor"
        REK_FACE_COLLECTION: !Ref RekognitionFaceCollection
        REK_ROLE_ARN: !GetAtt RekognitionServiceRole.Arn
        REK_FACE_MATCH_THRESHOLD: !Ref FaceMatchTreshold
        UPLOADS_BUCKET_NAME: !Sub "${AWS::StackName}-uploads-${AWS::AccountId}"
        WEBAPP_BUCKET_NAME: !Sub "${AWS::StackName}-webapp-${AWS::AccountId}"
        TARGET_FRAME_RATE: !Ref TargetFrameRate
        IdentityPoolId: !Ref IdPool

Parameters:
  ShouldBootstrapWebApp: 
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: >
            If set to True, static files for web app will be cloned from publicly available demo artifacts for this project.
            This setting must be True if deploying using the CloudFormation online console.
            Set this to False if you want to modify the default dashboard app files and/or deploy via the command line.
  ShouldDeleteVideoFragments:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: >
            If set to True, archived video files and stream fragments generated by web app will be deleted when this stack is deleted.
  KVSStreamName:
    Type: String
    Default: bp-fidgetology-demo-kvs
    Description: >
            Name of Kinesis Video Stream that will be created with this stack. 
            Change to the name of an existing Kinesis Video Stream if you do not want this stack to create a new one.
  RekognitionFaceCollection:
    Type: String
    Default: bp-fidgetology-demo-face-collection
    Description: >
            Name of empty Rekognition Face Collection that will be created with this stack. 
            Change to the name of an existing Face Collection if you do not want this stack to create a new one.
  TargetFrameRate:
    Type: Number
    Default: 10
    MinValue: 5
    MaxValue: 20
    Description: >
            Specify target frame rate (in FPS) that webcam should stream at.
  FaceMatchTreshold:
    Type: Number
    Default: 90
    MinValue: 50
    MaxValue: 99
    Description: >
            Specify Face Match confidence threshold for Rekognition Video steam processor.

Conditions:
  BootstrapWebApp: !Equals [ !Ref ShouldBootstrapWebApp, true ]

Resources:

  ####### S3 Buckets #######

  UploadsBucket:
    Type: AWS::S3::Bucket
    Description: Bucket that stores static videos and stream fragments uploaded using web app
    DeletionPolicy: Retain
    Properties: 
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET,POST,PUT,DELETE,HEAD]
            AllowedOrigins: ['*']
      BucketName: !Sub "${AWS::StackName}-uploads-${AWS::AccountId}"

  WebAppBucket:
    Type: AWS::S3::Bucket
    Description: Bucket that hosts static content of web app
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: !Sub "${AWS::StackName}-webapp-${AWS::AccountId}"

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebAppBucket
      PolicyDocument:
        Id: BPFidgetologyWebAppPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub "arn:aws:s3:::${WebAppBucket}/*"

  WebAppBootstrapperLambda:
    Type: AWS::Serverless::Function
    Condition: BootstrapWebApp
    Properties:
      Description: >
            Uploads dashboard static files to web app bucket when stack is created.
            Deletes web app bucket when stack is deleted.
            Deletes video fragments generated by web app when when stack is deleted.
      Handler: bootstrapper.handler
      Runtime: nodejs6.10
      CodeUri: ./dashboard
      FunctionName: !Sub "${AWS::StackName}-WebAppBootstrapper"
      Environment:
        Variables:
          ShouldDeleteVideoFragments: !Ref ShouldDeleteVideoFragments
      Timeout: 20
      Policies: 
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
                - iam:GetRole
              Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}*"
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:DeleteBucket
              Resource: 
                - !Sub "arn:aws:s3:::${AWS::StackName}-webapp-${AWS::AccountId}"
                - !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListObjects
                - s3:DeleteObject
              Resource: 
                - !Sub "arn:aws:s3:::${AWS::StackName}-webapp-${AWS::AccountId}/*"
                - !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"

  WebAppBootstrapper:
    Type: Custom::WebAppBootstrapper # Custom resource definition
    Description: >
            A custom resource that uploads dashboard static files to web app bucket upon stack creation.
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-WebAppBootstrapper"
    DependsOn: 
      - WebAppBucket
      - UploadsBucket
      - WebAppBootstrapperLambda


  ####### Cognito/Roles #######

  IdPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn

  UnauthRole:
    Type: AWS::IAM::Role
    Description: Allows unauthenticated web app users to upload videos to S3 bucket from browser (for demo purposes)
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsReadOnlyAccess
      Policies:
        - PolicyName: CognitoUnauthPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - kinesis:Get*
                  - kinesis:Describe*
                Resource: !GetAtt ProcessedDataStream.Arn

  RekognitionServiceRole:
    Type: AWS::IAM::Role
    Description: Allows Rekognition to call services on the account's behalf
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
            Effect: Allow
            Principal: 
              Service: rekognition.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRekognitionServiceRole

  ####### Stream Resources #######
  
  RawDataStream:
    Type: AWS::Kinesis::Stream
    Description: Kinesis Data Stream for ingesting raw output of Rekognition stream processor
    Properties:
      Name: !Sub "AmazonRekognition-${AWS::StackName}-kds"
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  ProcessedDataStream:
    Type: AWS::Kinesis::Stream
    Description: Kinesis Data Stream for ingesting processed body motion metrics for consumption by Web API
    Properties:
      Name: !Sub "${AWS::StackName}-processed-kds"
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  StreamResourceProvisionerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
            Provisions a Kinesis Video Stream and Rekognition Stream Processor when stack is created. 
            Deletes these stream resources when stack is deleted. 
            Bootstraps dashboard static files to web app bucket. 
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./lambda/StreamResourceProvisioner
      FunctionName: !Sub "${AWS::StackName}-StreamResourceProvisioner"
      Timeout: 5
      Policies: 
        - AWSLambdaExecute
        - AmazonKinesisVideoStreamsFullAccess
        - AmazonRekognitionFullAccess
        - AmazonKinesisFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
                - iam:GetRole
              Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}*"

  StreamResourceProvisioner:
    Type: Custom::StreamResourceProvisioner # Custom resource definition
    Description: >
            A custom resource that executes the StreamResourceProvisioner Lambda Function upon stack creation. 
            This is a temporary workaround until Kinesis Video Stream and Rekognition Stream Processor resource definitions 
            are available through CloudFormation.
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-StreamResourceProvisioner"
    DependsOn: 
      - RawDataStream
      - StreamResourceProvisionerLambda
      - RekognitionServiceRole

  # TODO: add KinesisVideoStream definition, once it is available through Cloudformation
  # TODO: add Rekognition Stream Processor definition, once it is available through Cloudformation
  
  ####### Serverless Lambda Functions #######

  MKVConverterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Converts static video uploads to streamable .MKV format for ingestion by Kinesis Video Streams
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./lambda/MKVConvert
      MemorySize: 3000
      Environment:
        Variables:
          FFMPEG_CMD: '-i %i -vcodec copy -an %o'
      Policies: 
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"
      Events:
        VideoUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref UploadsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw_uploads/

  S3ToKVSLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Artificially streams static .MKV video files in S3 to Kinesis Video Streams
      Handler: com.brainpower.fidgetology.demo.LambdaFunctionHandler::handleRequest
      Runtime: java8
      CodeUri: ./lambda/S3ToKVS/S3ToKVS.jar
      MemorySize: 3000
      Policies: 
        - AWSLambdaExecute
        - AmazonKinesisVideoStreamsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"
      Events:
        VideoConvertedEvent:
          Type: S3
          Properties:
            Bucket: !Ref UploadsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .mkv
                  - Name: prefix
                    Value: mkv_uploads/

  StreamAnalyzer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./lambda/StreamAnalyzer
      Policies:
        - AWSLambdaExecute
        - AmazonKinesisFullAccess
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt RawDataStream.Arn
            StartingPosition: TRIM_HORIZON

  WebAPI:
    Type: AWS::Serverless::Function
    Properties:
      Description: RESTful API endpoint for web app using Amazon API Gateway
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./lambda/WebApi
      MemorySize: 3000
      Environment:
        Variables:
          FFMPEG_CMD: '-r %r -f image2 -s 640x480 -i %i -vcodec libx264 -crf 25 -pix_fmt yuv420p %o'
      Policies:
        - AWSLambdaExecute
        - AmazonKinesisFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"
      Events:
        GetStatic:
          Type: Api
          Properties:
            Path: /App/{proxy+}
            Method: get
        GetConfig:
          Type: Api
          Properties:
            Path: /Config
            Method: get
        ReadStream:
          Type: Api
          Properties:
            Path: /ProcessedStream
            Method: get
        ProcessDataFrames:
          Type: Api
          Properties:
            Path: /FrameData
            Method: post

Outputs:
  WebAppSecureURL:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/App/index.html"
    Description: Public URL for web dashboard hosted on S3 and fronted by API Gateway.
  APIEndpoint:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Description: REST API endpoint for web app