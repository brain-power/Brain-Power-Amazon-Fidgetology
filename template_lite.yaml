# This template launches a 'Lite' version of the web app, which only includes Webcam to KVS functionality.
# 
# The 'Full' version of the web app can be launched using `template.yaml`, 
# which additionally includes Rekognition Video face detection and motion analytics features.
# 
# To deploy for the first time, and for each update,
# run both of the following commands in order:
#
# aws cloudformation package \
# --template-file template_lite.yaml \
# --output-template-file packaged-template_lite.yaml \
# --s3-bucket <your-s3-bucket-name>
#
# aws cloudformation deploy \
# --template-file packaged-template_lite.yaml \
# --stack-name <STACK_NAME> \
# --capabilities CAPABILITY_IAM

AWSTemplateFormatVersion: '2010-09-09'
# Using Serverless Application Model (SAM) CF template definition
# See specification: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md
Transform: 'AWS::Serverless-2016-10-31' 
Globals:
  Function:
    Timeout: 300 # seconds
    MemorySize: 1024 # MB
    Environment:
      Variables:
        KVS_STREAM_NAME: !Ref KVSStreamName
        PRODUCER_START_TIMESTAMP_KEY: "producer_start_timestamp"
        UPLOADS_BUCKET_NAME: !Sub "${AWS::StackName}-uploads-${AWS::AccountId}"
        WEBAPP_BUCKET_NAME: !Sub "${AWS::StackName}-webapp-${AWS::AccountId}"
        TARGET_FRAME_RATE: !Ref TargetFrameRate

Parameters:
  ShouldBootstrapWebApp: 
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: >
            If set to True, static files for web app will be cloned from publicly available demo artifacts for this project.
            This setting must be True if deploying using the CloudFormation online console.
            Set this to False if you want to modify the default dashboard app files and/or deploy via the command line.
  ShouldDeleteVideoFragments:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: >
            If set to True, archived video files and stream fragments generated by web app 
            will be deleted when this stack is deleted.
  TargetFrameRate:
    Type: Number
    Default: 10
    MinValue: 5
    MaxValue: 20
    Description: >
            Specify target frame rate (in FPS) that webcam should stream at.
  KVSStreamName:
    Type: String
    Default: browser-webcam-demo-kvs
    Description: >
            Name of Kinesis Video Stream that will be created with this stack. 
            Change to the name of an existing Kinesis Video Stream if you do not want this stack to create a new one.

Conditions:
  BootstrapWebApp: !Equals [ !Ref ShouldBootstrapWebApp, true ]

Resources:

  ####### S3 Buckets #######

  UploadsBucket:
    Type: AWS::S3::Bucket
    Description: Bucket that stores static videos and stream fragments uploaded using web app
    DeletionPolicy: Retain
    Properties: 
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET,POST,PUT,DELETE,HEAD]
            AllowedOrigins: ['*']
      BucketName: !Sub "${AWS::StackName}-uploads-${AWS::AccountId}"

  WebAppBucket:
    Type: AWS::S3::Bucket
    Description: Bucket that hosts static content of web app
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: !Sub "${AWS::StackName}-webapp-${AWS::AccountId}"

  WebAppBootstrapperLambda:
    Type: AWS::Serverless::Function
    Condition: BootstrapWebApp
    Properties:
      Description: >
            Uploads dashboard static files to web app bucket when stack is created.
            Deletes web app bucket when stack is deleted.
            Deletes video fragments generated by web app when when stack is deleted.
      Handler: bootstrapper.handler
      Runtime: nodejs6.10
      CodeUri: ./dashboard
      FunctionName: !Sub "${AWS::StackName}-WebAppBootstrapper"
      Environment:
        Variables:
          ShouldDeleteVideoFragments: !Ref ShouldDeleteVideoFragments
      Timeout: 20
      Policies: 
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
                - iam:GetRole
              Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}*"
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:DeleteBucket
              Resource: 
                - !Sub "arn:aws:s3:::${AWS::StackName}-webapp-${AWS::AccountId}"
                - !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListObjects
                - s3:DeleteObject
              Resource: 
                - !Sub "arn:aws:s3:::${AWS::StackName}-webapp-${AWS::AccountId}/*"
                - !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"

  WebAppBootstrapper:
    Type: Custom::WebAppBootstrapper # Custom resource definition
    Description: >
            A custom resource that uploads dashboard static files to web app bucket upon stack creation.
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-WebAppBootstrapper"
    DependsOn: 
      - WebAppBucket
      - UploadsBucket
      - WebAppBootstrapperLambda

  ####### Serverless Lambda Functions #######

  MKVConverterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Converts static video uploads to streamable .MKV format for ingestion by Kinesis Video Streams
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./lambda/MKVConvert
      MemorySize: 3000
      Environment:
        Variables:
          FFMPEG_CMD: '-i %i -vcodec copy -an %o'
      Policies: 
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"
      Events:
        VideoUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref UploadsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw_uploads/

  S3ToKVSLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Artificially streams static .MKV video files in S3 to Kinesis Video Streams
      Handler: com.brainpower.fidgetology.demo.LambdaFunctionHandler::handleRequest
      Runtime: java8
      CodeUri: ./lambda/S3ToKVS/S3ToKVS.jar
      MemorySize: 3000
      Policies: 
        - AWSLambdaExecute
        - AmazonKinesisVideoStreamsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"
      Events:
        VideoConvertedEvent:
          Type: S3
          Properties:
            Bucket: !Ref UploadsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .mkv
                  - Name: prefix
                    Value: mkv_uploads/

  WebAPI:
    Type: AWS::Serverless::Function
    Properties:
      Description: RESTful API endpoint for web app using Amazon API Gateway
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./lambda/WebApi
      MemorySize: 3000
      Environment:
        Variables:
          FFMPEG_CMD: '-r %r -f image2 -s 640x480 -i %i -vcodec libx264 -crf 25 -pix_fmt yuv420p %o'
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${AWS::StackName}-uploads-${AWS::AccountId}/*"
      Events:
        GetStatic:
          Type: Api
          Properties:
            Path: /App/{proxy+}
            Method: get
        GetConfig:
          Type: Api
          Properties:
            Path: /Config
            Method: get
        ProcessDataFrames:
          Type: Api
          Properties:
            Path: /FrameData
            Method: post

Outputs:
  WebAppSecureURL:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/App/index.html"
    Description: Public URL for web dashboard hosted on S3 and fronted by API Gateway.
  APIEndpoint:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Description: REST API endpoint for web app